generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model User {
  username  String  @id @db.VarChar(100)
  password  String  @db.VarChar(100)
  name      String  @db.VarChar(100)
  token     String? @db.VarChar(100)

  contacts  Contact[] @relation("UserContact")
  created_contacts Contact[] @relation("ContactCreator")
  updated_contacts Contact[] @relation("ContactUpdater")

  addresses Address[] @relation("UserAddressCreator")
  updated_addresses Address[] @relation("UserAddressUpdater")

  personal_access_tokens PersonalAccessToken? @relation("UserToken") 

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Address {
  id          Int      @id @default(autoincrement())
  street      String?  @db.VarChar(255)
  city        String?  @db.VarChar(100)
  province    String?  @db.VarChar(100)
  country     String   @db.VarChar(100)
  postal_code String   @db.VarChar(100)
  contactId   Int

  contact     Contact  @relation(fields: [contactId], references: [id])

  createdUsername String?  @db.VarChar(100)
  updatedUsername String?  @db.VarChar(100)

  creator     User?    @relation("UserAddressCreator", fields: [createdUsername], references: [username])
  updater     User?    @relation("UserAddressUpdater", fields: [updatedUsername], references: [username])

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("addresses")
}

model Contact {
  id         Int     @id @default(autoincrement())
  firstname  String  @db.VarChar(100)
  lastname   String? @db.VarChar(100)
  email      String? @db.VarChar(100)
  phone      String? @db.VarChar(20)
  username   String  @db.VarChar(100)

  user       User    @relation("UserContact", fields: [username], references: [username])

  createdUsername String? @db.VarChar(100)
  updatedUsername String? @db.VarChar(100)

  creator    User?   @relation("ContactCreator", fields: [createdUsername], references: [username])
  updater    User?   @relation("ContactUpdater", fields: [updatedUsername], references: [username])

  addresses  Address[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("contacts")
}

model PersonalAccessToken {
  id          Int     @id @default(autoincrement())
  token       String  @db.Text
  username    String  @db.VarChar(100) @unique
  expiresAt   DateTime
  revoked     Boolean @default(false)

  user        User    @relation("UserToken", fields: [username], references: [username], onDelete: Cascade) // One-to-One

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("personal_access_tokens")
}
